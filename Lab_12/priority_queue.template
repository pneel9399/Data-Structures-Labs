template <class T>
priority_queue<T>::priority_queue():h()
{
}

template <class T>
void priority_queue<T>::pop()
{
	if(!empty())
	h.remove();
}

template <class T>
void priority_queue<T>::push(const T& item)
{
	h.insert(item);
}

template <class T>
bool priority_queue<T>::empty() const
{
	return h.is_empty();
}

template <class T>
unsigned int priority_queue<T>::size() const
{
	return h.size();
}

template <class T>
T priority_queue<T>::top() const
{
	return h.max();
}

template <class T>
void priority_queue<T>::print_queue(priority_queue<T> priority_queue)
{
	while(!priority_queue.empty())
	{
		std::cout<<"Element on top: "<< priority_queue.top()<<std::endl;
		priority_queue.pop();
	}
}